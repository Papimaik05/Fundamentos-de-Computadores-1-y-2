
pract3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  0c000000  0c000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          00000020  0c000020  0c000020  00008020  2**0
                  ALLOC
  2 .text         000000c0  0c000040  0c000040  00008040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.attributes 00000022  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
  4 .debug_line   0000006a  00000000  00000000  00008122  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000068  00000000  00000000  0000818c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000014  00000000  00000000  000081f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000020  00000000  00000000  00008208  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000040 <start>:
.bss
B: 		.space N*4

.text
start:
		ldr R5,=A  //Introduzco la dirección de A en R1
 c000040:	e59f50b0 	ldr	r5, [pc, #176]	; c0000f8 <finsub2+0xc>
		ldr R6,=B  //Introduzco la dirección de B en R2
 c000044:	e59f60b0 	ldr	r6, [pc, #176]	; c0000fc <finsub2+0x10>
		mov R7,#0 //Inicializamos j
 c000048:	e3a07000 	mov	r7, #0

0c00004c <for>:


for:	cmp R7,#N //comparamos j con n
 c00004c:	e3570008 	cmp	r7, #8
        bge fin  //Si j es mayor que  N ,vamos al final
 c000050:	aa000008 	bge	c000078 <fin>
        mov R0,R5 // Primer parametro en R0(A)
 c000054:	e1a00005 	mov	r0, r5
        mov R1,#N //Segundo Parámetro en R1(#N)
 c000058:	e3a01008 	mov	r1, #8
        BL max  //Nos dirigimos a nuestra subrutina,guarda en r14(lr) la direccion siguiente de bl
 c00005c:	eb00000a 	bl	c00008c <max>
        ldr R8,[R5,R0,lsl#2] //Creamos el array A[ind]
 c000060:	e7958100 	ldr	r8, [r5, r0, lsl #2]
        str R8,[R6,R7,lsl#2] //Guardamos el valor que hay en A[ind] en la direccion de memoria de B[j]
 c000064:	e7868107 	str	r8, [r6, r7, lsl #2]
        mov R8,#0 //A[ind]=0
 c000068:	e3a08000 	mov	r8, #0
        str R8,[R5,R0,lsl#2] //Guardamos en la posicion de A[ind] un 0
 c00006c:	e7858100 	str	r8, [r5, r0, lsl #2]
        add R7,R7,#1 //j++
 c000070:	e2877001 	add	r7, r7, #1
        b for //volvemos a for
 c000074:	eafffff4 	b	c00004c <for>

0c000078 <fin>:

fin:
        mov R0,R6 // B
 c000078:	e1a00006 	mov	r0, r6
        mov R1,R5 //a
 c00007c:	e1a01005 	mov	r1, r5
        mov R2,#N
 c000080:	e3a02008 	mov	r2, #8
        bl copia
 c000084:	eb000010 	bl	c0000cc <copia>
        b . //fin
 c000088:	eafffffe 	b	c000088 <fin+0x10>

0c00008c <max>:

max:    push {R4,R5} //Guardas el valor de R4
 c00008c:	e92d0030 	push	{r4, r5}
        mov R3,#0 //inicializamos max
 c000090:	e3a03000 	mov	r3, #0
        mov R5,#0 //inicializamos i
 c000094:	e3a05000 	mov	r5, #0
        mov R2,#0 //inicializamos ind
 c000098:	e3a02000 	mov	r2, #0

0c00009c <mbuc>:

mbuc:   cmp R5,R1 //comparamos i con N
 c00009c:	e1550001 	cmp	r5, r1
        bge fdf //Si i es mayor que n,vamos a fdf
 c0000a0:	aa000006 	bge	c0000c0 <fdf>
        ldr R4,[R0,R5,lsl#2] //Creamos el array A[i]
 c0000a4:	e7904105 	ldr	r4, [r0, r5, lsl #2]
        cmp R3,R4 //comparamos max con el array mencionado anteriormente
 c0000a8:	e1530004 	cmp	r3, r4
        bge else //Si max es mayor que el array vamos a else
 c0000ac:	aa000001 	bge	c0000b8 <else>
        mov R3,R4 // max=A[i]
 c0000b0:	e1a03004 	mov	r3, r4
        mov R2,R5 // ind=i
 c0000b4:	e1a02005 	mov	r2, r5

0c0000b8 <else>:

else:   add r5,r5,#1 // i++
 c0000b8:	e2855001 	add	r5, r5, #1
        b mbuc //Volvemos a mbuc
 c0000bc:	eafffff6 	b	c00009c <mbuc>

0c0000c0 <fdf>:

fdf:    mov R0,R2 //Guardamos lo que hemos obtenido en la subrutina en r0
 c0000c0:	e1a00002 	mov	r0, r2
        pop {R4,R5}//Restauras el valor de R4
 c0000c4:	e8bd0030 	pop	{r4, r5}
        mov pc,lr //Retorno a la funcion llamante
 c0000c8:	e1a0f00e 	mov	pc, lr

0c0000cc <copia>:

copia:  push {R4}
 c0000cc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
        mov R3,#0              //iniciliazamos i
 c0000d0:	e3a03000 	mov	r3, #0

0c0000d4 <bucsub>:

bucsub: cmp R3,R2              //comparamos i con la longitud
 c0000d4:	e1530002 	cmp	r3, r2
        bge finsub2
 c0000d8:	aa000003 	bge	c0000ec <finsub2>
		ldr R4,[R0,R3,LSL#2]	//guardamos en R4 B[i]
 c0000dc:	e7904103 	ldr	r4, [r0, r3, lsl #2]
		str R4,[R1,R3,LSL#2]	//guardamos en A[i] el registro R4
 c0000e0:	e7814103 	str	r4, [r1, r3, lsl #2]
		add R3,R3,#1			//aumentamos i --> i++
 c0000e4:	e2833001 	add	r3, r3, #1
		b bucsub				//vuelve al inicio del bucle de la subrutina
 c0000e8:	eafffff9 	b	c0000d4 <bucsub>

0c0000ec <finsub2>:
finsub2:
		mov R0, R1
 c0000ec:	e1a00001 	mov	r0, r1
		pop {R4}				//Recuperamos los posibles valores que hubiese en R4 y R5 que habiamos protegido al principio de la subrutina
 c0000f0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
		mov pc, lr				//Vuelta a la funcion llamante (viene a ser un return de c)
 c0000f4:	e1a0f00e 	mov	pc, lr
 c0000f8:	0c000000 	.word	0x0c000000
 c0000fc:	0c000020 	.word	0x0c000020
