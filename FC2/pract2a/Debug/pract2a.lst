
pract2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  0c000000  0c000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          00000004  0c000020  0c000020  00008020  2**0
                  ALLOC
  2 .text         00000044  0c000024  0c000024  00008024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.attributes 00000022  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
  4 .debug_line   0000004c  00000000  00000000  0000808a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000006a  00000000  00000000  000080d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000014  00000000  00000000  00008140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000020  00000000  00000000  00008158  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000024 <start>:
.bss
max: 	.space 4

.text
start:
		mov r0, #0  //Inicializamos max en 0 (max=0)
 c000024:	e3a00000 	mov	r0, #0
		ldr r1,=max //Introduzco la dirección de max en R1
 c000028:	e59f1030 	ldr	r1, [pc, #48]	; c000060 <fin+0x4>
		ldr R2,=A   //Introduzco la dirección de A en R2
 c00002c:	e59f2030 	ldr	r2, [pc, #48]	; c000064 <fin+0x8>
		ldr R4,=N   //Introduzco la dirección de N en R4
 c000030:	e3a04008 	mov	r4, #8
		mov R3,#0   //Inicializamos i
 c000034:	e3a03000 	mov	r3, #0

0c000038 <for>:

for:	cmp R3,R4  //Comparamos N e i,para iniciar un bucle for
 c000038:	e1530004 	cmp	r3, r4
		bge fin    //Si i es mayor que N , salimos del bucle for y nos dirigimos a fin
 c00003c:	aa000006 	bge	c00005c <fin>
		ldr R5,[R2,R3,lsl#2] //Creamos el array A[i]
 c000040:	e7925103 	ldr	r5, [r2, r3, lsl #2]
		cmp R0,R5 //Comparamos el array mencionado anteriormente y max (en un bucle if)
 c000044:	e1500005 	cmp	r0, r5
		bge else  //Si el array es mayor que max,nos dirigimos a else
 c000048:	aa000001 	bge	c000054 <else>
		mov R0,R5 // Igualamos max al array (max=A[i])
 c00004c:	e1a00005 	mov	r0, r5
		str r0,[r1] //Guardas el valor que hay en R0 en la direccion de memoria de R1
 c000050:	e5810000 	str	r0, [r1]

0c000054 <else>:

else:	add R3,R3,#1 //Hacemos que aumente el contador i
 c000054:	e2833001 	add	r3, r3, #1
		b for  //Vuelves al origen del bucle for
 c000058:	eafffff6 	b	c000038 <for>

0c00005c <fin>:

fin:	b .
 c00005c:	eafffffe 	b	c00005c <fin>
 c000060:	0c000020 	.word	0x0c000020
 c000064:	0c000000 	.word	0x0c000000
